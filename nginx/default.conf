# Port 80: serve site + ACME challenge + redirect to HTTPS
server {
  listen 80;
  server_name itknows.nl www.itknows.nl;

  root /usr/share/nginx/html;
  index index.html;

  # ACME challenge (Certbot webroot)
  location ^~ /.well-known/acme-challenge/ {
    alias /var/www/certbot/.well-known/acme-challenge/;
  }

  # Health proxied (optional)
  location /health {
    proxy_pass http://backend:8080/health;
    proxy_set_header Host $host;
  }

  # Everything else serves the SPA
  location / { try_files $uri $uri/ /index.html; }
}

# Port 443: real site with TLS
server {
  listen 443 ssl;
  server_name itknows.nl www.itknows.nl;

  ssl_certificate     /etc/letsencrypt/live/itknows.nl/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/itknows.nl/privkey.pem;

  # basic TLS hardening (kept simple)
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_prefer_server_ciphers on;

  root /usr/share/nginx/html;
  index index.html;

  gzip on;
  gzip_types text/plain text/css application/json application/javascript text/xml application/xml image/svg+xml;

  # API â†’ backend (long timeouts inherited from nginx.conf)
  location /health { proxy_pass http://backend:8080/health; proxy_set_header Host $host; }
  location /ask    { proxy_pass http://backend:8080/ask;    proxy_set_header Host $host; }
  location /upload { client_max_body_size 100m; proxy_pass http://backend:8080/upload; proxy_set_header Host $host; }

  location / { try_files $uri $uri/ /index.html; }
}

# Redirect plain HTTP to HTTPS once certs exist
server {
  listen 80;
  server_name itknows.nl www.itknows.nl;
  return 301 https://$host$request_uri;
}
